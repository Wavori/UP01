#ViewLocator.cs
using Avalonia.Controls;
using Avalonia.Controls.Templates;
using System;

public class ViewLocator : IDataTemplate
{
    public bool SupportsRecycling => false;

    public Control Build(object data)
    {
        var name = data.GetType().FullName.Replace("ViewModel", "View");
        var type = Type.GetType(name);
        if (type != null)
        {
            return (Control)Activator.CreateInstance(type);
        }
        else
        {
            return new TextBlock { Text = "Not Found: " + name };
        }
    }

    public bool Match(object data)
    {
        return data is ViewModelBase;
    }
}



#App.axaml
<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:YourNamespace"
             x:Class="YourNamespace.App">

    <Application.DataTemplates>
        <local:ViewLocator/>
    </Application.DataTemplates>
</Application>




#MainViewModel.cs 
using System.ComponentModel;

public class MainViewModel : INotifyPropertyChanged
{
    private ViewModelBase _currentPage;

    public ViewModelBase CurrentPage
    {
        get => _currentPage;
        set
        {
            _currentPage = value;
            OnPropertyChanged(nameof(CurrentPage));
        }
    }

    public static NavigationService NavigationService { get; } = new NavigationService();

    public MainViewModel()
    {
        NavigationService.NavigateTo(new RegistrationViewModel());
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}




#NavigationService.cs
using System;
using System;
using System.Collections.Generic;

public class NavigationService
{
    private readonly Stack<ViewModelBase> _navigationStack = new Stack<ViewModelBase>();

    public void NavigateTo<T>(T viewModel, Action<T>? action = null) where T : ViewModelBase
    {
        action?.Invoke(viewModel);
        _navigationStack.Push(viewModel);
        UpdateCurrentPage(viewModel);
    }

    public void GoBack(int steps = 1)
    {
        if (steps > 0 && _navigationStack.Count > steps)
        {
            _navigationStack.Pop();
            UpdateCurrentPage(_navigationStack.Peek());
        }
    }

    private void UpdateCurrentPage(ViewModelBase viewModel)
    {
        if (App.Current.ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktopLifetime)
        {
            if (desktopLifetime.MainWindow.DataContext is MainViewModel mainViewModel)
            {
                mainViewModel.CurrentPage = viewModel;
            }
        }
    }
}





#MainWindow.axaml
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="ИмяПроекта.Views.MainWindow">

    <StackPanel>
        <Button Content="Регистрация" Click="OnGoToRegistration"/>
        <Button Content="Авторизация" Click="OnGoToAuthorization"/>
        <ContentControl Content="{Binding CurrentPage}"/>
    </StackPanel>
</Window>






#MainWindow.axaml.cs
using Avalonia.Controls;

namespace ИмяПроекта.Views
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }

        private void OnGoToRegistration(object sender, Avalonia.Interactivity.RoutedEventArgs e)
        {
            MainViewModel.NavigationService.NavigateTo(new RegistrationViewModel());
        }

        private void OnGoToAuthorization(object sender, Avalonia.Interactivity.RoutedEventArgs e)
        {
            MainViewModel.NavigationService.NavigateTo(new AuthorizationViewModel());
        }
    }
}





#AutorizationViewModel.cs
public class AuthorizationViewModel : ViewModelBase
{
    // Implementation for AuthorizationViewModel
}




#RegistrationViewModel.cs
public class RegistrationViewModel : ViewModelBase
{
    // Implementation for RegistrationViewModel
}




#AutorizationView.axaml
<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="YourNamespace.Views.AuthorizationView">

    <StackPanel>
        <TextBlock Text="Authorization Page"/>
        <!-- Add authorization controls here -->
    </StackPanel>
</UserControl>



#RegistrationView.axaml
<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="YourNamespace.Views.RegistrationView">

    <StackPanel>
        <TextBlock Text="Registration Page"/>
        <!-- Add registration controls here -->
    </StackPanel>
</UserControl>
