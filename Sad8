#WeatherService.cs
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;

public class WeatherService
{
    private readonly string _apiKey;
    private readonly HttpClient _httpClient;

    public WeatherService(string apiKey)
    {
        _apiKey = apiKey;
        _httpClient = new HttpClient();
    }

    public async Task<CurrentWeather> GetCurrentWeatherByName(string cityName)
    {
        string requestUri = $"https://api.openweathermap.org/data/2.5/weather?q={cityName}&appid={_apiKey}&units=metric";
        using HttpResponseMessage response = await _httpClient.GetAsync(requestUri);
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<CurrentWeather>(responseBody);
    }

    public async Task<List<GeocodingResult>> GetGeocoding(string cityName)
    {
        string requestUri = $"https://api.openweathermap.org/geo/1.0/direct?q={cityName}&appid={_apiKey}";
        using HttpResponseMessage response = await _httpClient.GetAsync(requestUri);
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<List<GeocodingResult>>(responseBody);
    }

    public async Task<CurrentWeather> GetCurrentWeatherByCoordinates(double lat, double lon)
    {
        string requestUri = $"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={_apiKey}&units=metric";
        using HttpResponseMessage response = await _httpClient.GetAsync(requestUri);
        response.EnsureSuccessStatusCode();
        string responseBody = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<CurrentWeather>(responseBody);
    }
}

public class CurrentWeather
{
    public string Name { get; set; }
    public MainWeather Main { get; set; }
    public WeatherDescription[] Weather { get; set; }
    public Wind Wind { get; set; }
    public string WeatherIconCode => Weather.Length > 0 ? Weather[0].Icon : string.Empty;
}

public class MainWeather
{
    public float Temp { get; set; }
    public float FeelsLike { get; set; }
    public int Pressure { get; set; }
    public int Humidity { get; set; }
}

public class WeatherDescription
{
    public string Description { get; set; }
    public string Icon { get; set; }
}

public class Wind
{
    public float Speed { get; set; }
    public int Deg { get; set; }
}

public class GeocodingResult
{
    public string Name { get; set; }
    public double Lat { get; set; }
    public double Lon { get; set; }
}



#WeatherPage.xaml
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="WeatherApp.Views.WeatherPage"
        Title="Weather App">

    <StackPanel>
        <TextBox x:Name="CityNameTextBox" PlaceholderText="Enter city name"/>
        <Button Content="Get Weather" Click="OnGetWeatherButtonClicked"/>
        <StackPanel x:Name="WeatherCard" Visibility="Collapsed">
            <TextBlock Text="{Binding Name}"/>
            <TextBlock Text="{Binding Weather[0].Description}"/>
            <TextBlock Text="{Binding Main.Temp, StringFormat='Temperature: {0}°C'}"/>
            <TextBlock Text="{Binding Main.FeelsLike, StringFormat='Feels Like: {0}°C'}"/>
            <TextBlock Text="{Binding Main.Pressure, StringFormat='Pressure: {0} hPa'}"/>
            <TextBlock Text="{Binding Main.Humidity, StringFormat='Humidity: {0}%'}"/>
            <TextBlock Text="{Binding Wind.Speed, StringFormat='Wind Speed: {0} m/s'}"/>
            <TextBlock Text="{Binding Wind.Deg, StringFormat='Wind Direction: {0}°'}"/>
            <Image Source="{Binding WeatherIcon^}"/>
        </StackPanel>
    </StackPanel>
</Window>



#WeatherPage.xaml.cs
using Avalonia.Controls;
using Avalonia.Interactivity;
using System.Threading.Tasks;

public partial class WeatherPage : Window
{
    private readonly WeatherService _weatherService;

    public WeatherPage()
    {
        InitializeComponent();
        _weatherService = new WeatherService("Ваш_API_ключ");
    }

    private async void OnGetWeatherButtonClicked(object sender, RoutedEventArgs e)
    {
        string cityName = CityNameTextBox.Text;
        var weather = await _weatherService.GetCurrentWeatherByName(cityName);

        // Привязка данных к карточке
        WeatherCard.DataContext = weather;
        WeatherCard.Visibility = Avalonia.Controls.Primitives.ToggleButton.Visible;
    }
}



#ImageHelper.cs
using System.Threading.Tasks;
using Avalonia.Media.Imaging;

public static class ImageHelper
{
    public static async Task<Bitmap?> LoadFromWeb(string url)
    {
        using var httpClient = new HttpClient();
        var bytes = await httpClient.GetByteArrayAsync(url);
        using var ms = new System.IO.MemoryStream(bytes);
        return new Bitmap(ms);
    }
}
